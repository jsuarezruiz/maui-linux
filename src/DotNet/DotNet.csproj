<Project Sdk="Microsoft.Build.NoTargets">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IsPackable>false</IsPackable>
    <InstallWorkloadPacks Condition=" '$(InstallWorkloadPacks)' == '' ">true</InstallWorkloadPacks>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('windows'))">
    <DotNetInstallScriptUrl>https://dot.net/v1/dotnet-install.ps1</DotNetInstallScriptUrl>
    <DotNetInstallScriptName>dotnet-install.ps1</DotNetInstallScriptName>
    <DotNetInstallScriptPath>$(DotNetOutputPath)$(DotNetInstallScriptName)</DotNetInstallScriptPath>
    <DotNetInstallCommand>&amp; '$(DotNetInstallScriptPath)' -Version $(MicrosoftDotnetSdkInternalPackageVersion) -InstallDir '$(DotNetDirectory)' -Verbose</DotNetInstallCommand>
    <DotNetInstallCommand>powershell -Command &quot;$(DotNetInstallCommand)&quot;</DotNetInstallCommand>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('osx'))">
    <DotNetInstallScriptUrl>https://dot.net/v1/dotnet-install.sh</DotNetInstallScriptUrl>
    <DotNetInstallScriptName>dotnet-install.sh</DotNetInstallScriptName>
    <DotNetInstallScriptPath>$(DotNetOutputPath)$(DotNetInstallScriptName)</DotNetInstallScriptPath>
    <DotNetInstallCommand>sh '$(DotNetInstallScriptPath)' --version $(MicrosoftDotnetSdkInternalPackageVersion) --install-dir '$(DotNetDirectory)' --verbose</DotNetInstallCommand>
  </PropertyGroup>

  <PropertyGroup>
    <_ProvisionDependsOn>
      _DownloadDotNetInstallScript;
      _InstallDotNet;
      _AcquireWorkloadManifests;
      _InstallWorkloadPacks;
    </_ProvisionDependsOn>
  </PropertyGroup>

  <Import Project="$(MauiRootDirectory)eng/ReplaceText.targets" />

  <!-- Build target provisions ./bin/dotnet/ -->
  <Target Name="_Provision" BeforeTargets="Build" DependsOnTargets="$(_ProvisionDependsOn)" />

  <!--
    Install target takes artifacts/*.nupkg and installs them to the current 'dotnet'.
    Running this with ./bin/dotnet/dotnet will work without elevation.
    For a system install, you will need to run this in an admin command-prompt on Windows, or use 'sudo' on Mac.
  -->
  <Target Name="Install" DependsOnTargets="SetVersions">

    <Error
        Condition=" '$(MSBuildRuntimeType)' != 'Core' "
        Text="You should only run this target with 'dotnet build'."
    />
    <PropertyGroup>
      <_InstallTempDirectory>$(DotNetTempDirectory)install/</_InstallTempDirectory>
    </PropertyGroup>

    <!-- Setup Microsoft.NET.Sdk.Maui/WorkloadManifest.* -->
    <ItemGroup>
      <_PackagesToUnzip Include="$(PackageOutputPath)/Microsoft.NET.Sdk.Maui.Manifest-$(DotNetPreviewVersionBand).*.nupkg" />
    </ItemGroup>
    <Unzip
        SourceFiles="@(_PackagesToUnzip)"
        DestinationFolder="$(_InstallTempDirectory)"
    />
    <ItemGroup>
      <_WorkloadFiles Include="$(_InstallTempDirectory)data/WorkloadManifest.*" />
    </ItemGroup>
    <CopyWorkloadFiles
        Name="Microsoft.NET.Sdk.Maui"
        Files="@(_WorkloadFiles)"
        WorkloadDirectory="$(MSBuildExtensionsPath)../../sdk-manifests/$(DotNetPreviewVersionBand)"
        VersionBand="$(DotNetPreviewVersionBand)"
    />
    <RemoveDir Directories="$(_InstallTempDirectory)" />

    <!-- Run 'dotnet workload install' -->
    <PropertyGroup>
      <_ThisDotNet>$(MSBuildExtensionsPath)../../dotnet</_ThisDotNet>
      <_NuGetConfig>$(DotNetTempDirectory)NuGet.config</_NuGetConfig>
      <_NuGetContent>
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <clear />
    <add key="local"   value="$(PackageOutputPath)" />
    <add key="dotnet6" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json" />
    <add key="xamarin" value="https://pkgs.dev.azure.com/azure-public/vside/_packaging/xamarin-impl/nuget/v3/index.json" />
  </packageSources>
</configuration>
]]>
      </_NuGetContent>
    </PropertyGroup>
    <WriteLinesToFile File="$(_NuGetConfig)" Lines="$(_NuGetContent)" Overwrite="true" />
    <Exec
        Command="&quot;$(_ThisDotNet)&quot; workload install maui --skip-manifest-update --verbosity diag --temp-dir $(DotNetTempDirectory)"
        WorkingDirectory="$(DotNetTempDirectory)"
    />
    <Delete Files="$(_NuGetConfig)" />

    <!--
      HACK: temporarily put runtime packs in 'library-packs', until they can be resolved from 'packs'
      See: https://github.com/dotnet/sdk/issues/14044
    -->
    <ItemGroup>
      <_RuntimePacks Include="$(PackageOutputPath)/*.Runtime.*.nupkg" />
      <_RuntimePacks Include="$(PackageOutputPath)/Microsoft.Maui.Extensions.*.nupkg" />
    </ItemGroup>
    <Copy SourceFiles="@(_RuntimePacks)" DestinationFolder="$(MSBuildExtensionsPath)../../library-packs" SkipUnchangedFiles="true" />

  </Target>

  <!-- Eventually replaced by eng/Version.targets -->
  <Target Name="SetVersions" />

  <PropertyGroup>
    <!-- These files should invalidate ./bin/dotnet completely -->
    <_Inputs>
      $(MSBuildThisFile);
      ../../eng/Versions.props;
    </_Inputs>
  </PropertyGroup>

  <Target Name="_DownloadDotNetInstallScript"
      Inputs="$(_Inputs)"
      Outputs="$(DotNetInstallScriptPath)">
    <DownloadFile
        SourceUrl="$(DotNetInstallScriptUrl)"
        DestinationFolder="$(DotNetOutputPath)"
        DestinationFileName="$(DotNetInstallScriptName)"
    />
  </Target>

  <Target Name="_InstallDotNet"
      Inputs="$(_Inputs)"
      Outputs="$(DotNetDirectory).stamp">
    <RemoveDir Directories="$(DotNetDirectory)" />
    <Exec Command="$(DotNetInstallCommand)" />
    <Touch Files="$(DotNetDirectory).stamp" AlwaysCreate="true" />
  </Target>

  <ItemGroup>
    <!-- These are past workload names -->
    <_PacksToRemove Include="Microsoft.NET.Workload.Android" />
    <_PacksToRemove Include="Microsoft.NET.Workload.MacCatalyst" />
    <_PacksToRemove Include="Microsoft.NET.Workload.iOS" />
    <_PacksToRemove Include="Microsoft.NET.Workload.tvOS" />
    <_PacksToRemove Include="Microsoft.NET.Workload.macOS" />
    <!-- Ids for 'dotnet workload install' -->
    <_WorkloadIds Include="microsoft-android-sdk-full" />
    <_WorkloadIds Include="microsoft-maccatalyst-sdk-full" />
    <_WorkloadIds Include="microsoft-macos-sdk-full" />
    <_WorkloadIds Include="microsoft-ios-sdk-full" />
    <_WorkloadIds Include="microsoft-tvos-sdk-full" />
  </ItemGroup>

  <Target Name="_AcquireWorkloadManifests"
      Inputs="$(_Inputs);Dependencies/Workloads.csproj"
      Outputs="$(DotNetSdkManifestsDirectory).stamp">
    <PropertyGroup>
      <_WorkloadManifestDir>$(DotNetTempDirectory)workload/</_WorkloadManifestDir>
    </PropertyGroup>
    <RemoveDir Directories="$(_WorkloadManifestDir);@(_PacksToRemove->'$(DotNetSdkManifestsDirectory)%(Identity)')" />
    <MakeDir Directories="$(_WorkloadManifestDir)" />
    <Exec
        Command="&quot;$(DotNetToolPath)&quot; restore &quot;$(MSBuildThisFileDirectory)Dependencies/Workloads.csproj&quot; -bl:$(PackageOutputPath)/DotNetWorkloads.binlog"
        EnvironmentVariables="NUGET_PACKAGES=$(_WorkloadManifestDir);DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1"
    />
    <!--
      NOTE: Workloads need to go in dotnet/sdk-manifests/6.0.100/microsoft.net.*/
      Workloads only contain two files: data/WorkloadManifest.targets & data/WorkloadManifest.json
      We downloaded these to $(_WorkloadManifestDir), so we could move files individually.
    -->
    <ItemGroup>
      <_WorkloadFiles Include="$(_WorkloadManifestDir)microsoft.net.*/*/data/WorkloadManifest.*" />
    </ItemGroup>
    <CopyWorkloadFiles
        Files="@(_WorkloadFiles)"
        WorkloadDirectory="$(DotNetSdkManifestsDirectory)"
        VersionBand="$(DotNetPreviewVersionBand)"
    />

    <!-- HACK: temporary fixes for iOS and MacCatalyst workloads -->
    <ReplaceText
        Input="$(DotNetSdkManifestsDirectory)microsoft.net.workload.mono.toolchain/WorkloadManifest.targets"
        Output="$(DotNetSdkManifestsDirectory)microsoft.net.workload.mono.toolchain/WorkloadManifest.targets"
        OldValue="Sdk=&quot;Microsoft.NETCore.App.Runtime.AOT.Cross.maccatalyst&quot;"
        NewValue="Condition=&quot;%24([MSBuild]::IsOSPlatform('osx'))&quot; Sdk=&quot;Microsoft.NETCore.App.Runtime.AOT.Cross.maccatalyst&quot;"
    />
    <ReplaceText
        Input="$(DotNetSdkManifestsDirectory)microsoft.net.workload.mono.toolchain/WorkloadManifest.targets"
        Output="$(DotNetSdkManifestsDirectory)microsoft.net.workload.mono.toolchain/WorkloadManifest.targets"
        OldValue="Sdk=&quot;Microsoft.NETCore.App.Runtime.AOT.Cross.ios-arm&quot;"
        NewValue="Condition=&quot;%24([MSBuild]::IsOSPlatform('osx'))&quot; Sdk=&quot;Microsoft.NETCore.App.Runtime.AOT.Cross.ios-arm&quot;"
    />
    <ReplaceText
        Input="$(DotNetSdkManifestsDirectory)microsoft.net.workload.mono.toolchain/WorkloadManifest.targets"
        Output="$(DotNetSdkManifestsDirectory)microsoft.net.workload.mono.toolchain/WorkloadManifest.targets"
        OldValue="Sdk=&quot;Microsoft.NETCore.App.Runtime.AOT.Cross.ios-arm64&quot;"
        NewValue="Condition=&quot;%24([MSBuild]::IsOSPlatform('osx'))&quot; Sdk=&quot;Microsoft.NETCore.App.Runtime.AOT.Cross.ios-arm64&quot;"
    />

    <Touch Files="$(DotNetSdkManifestsDirectory).stamp" AlwaysCreate="true" />
  </Target>

  <Target Name="_InstallWorkloadPacks"
      Condition=" '$(InstallWorkloadPacks)' == 'true' "
      Inputs="$(_Inputs)"
      Outputs="$(DotNetPacksDirectory).stamp">
    <Exec
        Command="&quot;$(DotNetToolPath)&quot; workload install @(_WorkloadIds, ' ') --skip-manifest-update --verbosity diag --temp-dir $(DotNetTempDirectory)"
        WorkingDirectory="$(MauiRootDirectory)"
    />
    <Touch Files="$(DotNetPacksDirectory).stamp" AlwaysCreate="true" />
  </Target>

  <UsingTask TaskName="CopyWorkloadFiles"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Name ParameterType="System.String" />
      <Files ParameterType="System.String[]" Required="true" />
      <WorkloadDirectory ParameterType="System.String" Required="true" />
      <VersionBand ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          // This is only in C#, because the equivalent MSBuild XML would not be pretty.
          foreach (var file in Files)
          {
              var name = string.IsNullOrEmpty(Name) ? Directory.GetParent (file).Parent.Parent.Name : Name;
              var directory = Path.Combine(WorkloadDirectory, name.Replace($".manifest-{VersionBand}", ""));
              Directory.CreateDirectory(directory);
              var destination = Path.Combine(directory, Path.GetFileName(file));
              Log.LogMessage($"Copying {file} to {destination}");
              File.Copy(file, destination, overwrite: true);
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>